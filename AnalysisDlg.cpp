// AnalysisDlg.cpp : implementation file
//

#include "stdafx.h"
#include "Calibration.h"
#include "AnalysisDlg.h"
#include "CalibrationDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CAnalysisDlg dialog


CAnalysisDlg::CAnalysisDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CAnalysisDlg::IDD, pParent)
{
	//{{AFX_DATA_INIT(CAnalysisDlg)
		// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}


void CAnalysisDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CAnalysisDlg)
	DDX_Control(pDX, IDC_LIST_ANALYSIS, m_list);
	//}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CAnalysisDlg, CDialog)
	//{{AFX_MSG_MAP(CAnalysisDlg)
	ON_BN_CLICKED(IDC_CHECKOUT, OnCheckout)
	ON_NOTIFY(NM_DBLCLK, IDC_LIST_ANALYSIS, OnDblclkListAnalysis)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CAnalysisDlg message handlers
LRESULT   __stdcall   CBTHookProc(   long   nCode,WPARAM   wParam,LPARAM   lParam) ;
extern HHOOK   hHook; 

int __stdcall SetChildFont(struct HWND__ *,long);
//extern CFont *g_Font;

BOOL CAnalysisDlg::OnInitDialog() 
{
	CDialog::OnInitDialog();
	
	// TODO: Add extra initialization here
	Sleep(1000);
	CCalibrationApp *app = (CCalibrationApp *)AfxGetApp();

	LOGFONT lf;                        // Used to create the CFont.
	memset(&lf, 0, sizeof(LOGFONT));   // Clear out structure.
	lf.lfHeight = 15;                  // Request a 20-pixel-high font
	strcpy(lf.lfFaceName, "Times New Roman");    
	if (g_font.m_hObject)
		g_font.DeleteObject();
	g_font.CreateFontIndirect(&lf);    // Create the font.

	if (app->language == 0)
	{
		this->SetWindowText("结果分析");
		GetDlgItem(IDC_STATIC_A)->SetWindowText("结果分析");
		GetDlgItem(IDC_CHECKOUT)->SetWindowText("校验");
		m_list.SetExtendedStyle(m_list.GetExtendedStyle()|LVS_EX_FULLROWSELECT);
		m_list.InsertColumn(0,"表号",LVCFMT_LEFT,50); 
		m_list.InsertColumn(1,"序列号",LVCFMT_LEFT,90);
		m_list.InsertColumn(2,"系数",LVCFMT_LEFT,110);
		m_list.InsertColumn(3,"修正后系数",LVCFMT_LEFT,110);
		m_list.InsertColumn(4,"校验结果",LVCFMT_LEFT,103);	
		//g_Font = new CFont;       
		//g_Font->CreatePointFont(90, "宋体");
		::EnumChildWindows(m_hWnd, ::SetChildFont, (LPARAM)&g_font);
	}
	else
	{
		this->SetWindowText("Analysis");
		GetDlgItem(IDC_STATIC_A)->SetWindowText("Analysis");
		GetDlgItem(IDC_CHECKOUT)->SetWindowText("Checkout");
		m_list.SetExtendedStyle(m_list.GetExtendedStyle()|LVS_EX_FULLROWSELECT);
		m_list.InsertColumn(0,"IDN",LVCFMT_LEFT,50); 
		m_list.InsertColumn(1,"S/N",LVCFMT_LEFT,90);
		m_list.InsertColumn(2,"Scale Factor",LVCFMT_LEFT,110);
		m_list.InsertColumn(3,"Corrected Scale Factor",LVCFMT_LEFT,110);
		m_list.InsertColumn(4,"State",LVCFMT_LEFT,103);
		//g_Font = new CFont;       
		//g_Font->CreatePointFont(90, "Times New Roman");
		::EnumChildWindows(m_hWnd, ::SetChildFont, (LPARAM)&g_font); 

		//delete g_Font;
		//g_Font = NULL;
	}
	int i;
	for (i=0; i<20; i++)
	{
		check[i] = 1;		
	}
	//打开数据库
	//m_pAppConn.CreateInstance(__uuidof(Connection));
	//m_pAppConn->Open("File Name=MyData.udl", "", "", adConnectUnspecified);

	try
	{
		HRESULT hr = m_pAppConn.CreateInstance(__uuidof(Connection));
		if (FAILED(hr))
			AfxMessageBox("Can't create an intance of ADO.Connection");

		if (FAILED(m_pAppConn->Open(_bstr_t("File Name=MyData.udl"), _bstr_t(""), _bstr_t(""), adModeUnknown)))
			::AfxMessageBox(TEXT("Can't open datasource"));
		//m_pAppConn->Close();
	}
	catch (_com_error &e)
	{
		::AfxMessageBox(TEXT("I am in catch block 1"));
		_bstr_t bstrSource(e.Source());
		_bstr_t bstrDescription(e.Description());
		TRACE("Exception thrown for classes generated by #import");
		TRACE("\tCode = %08lx\n", e.Error());
		TRACE("\tCode meaning = %s\n", e.ErrorMessage());
		TRACE("\tSource = %s\n", (LPCTSTR)bstrSource);
		TRACE("\tDescription = %s\n", (LPCTSTR)bstrDescription);
	}
	catch (...)
	{
		TRACE("*** Unhandled Exception ***");
	}

	CString sql;
	sql.Format("USE settings");
	m_pAppConn->Execute((_bstr_t)sql,NULL,adCmdText);
	
	SYSTEMTIME st;
	CString strtime;
	GetLocalTime(&st);
	strtime.Format("%04d%02d%02d", st.wYear, st.wMonth, st.wDay);
	
	int flag = 1;
	int temp, max = 0;

	sql.Format("SELECT RIGHT(name,3) bh FROM sysobjects WHERE name LIKE \'Data%s%c\'", strtime, '%');
	try
	{
		m_recordset = m_pAppConn->Execute((_bstr_t)sql,NULL,adCmdText);
		if (!m_recordset->adoEOF)
		{
			m_recordset->MoveFirst();
		}
		else
		{
			if (app->language == 0)
			{
				AfxMessageBox("请先完成前面的操作!");
			}
			else
			{
				hHook=SetWindowsHookEx(WH_CBT,(HOOKPROC)CBTHookProc,AfxGetInstanceHandle(),NULL); 
				AfxMessageBox("Please complete the previous operation!");
			}
			flag = 0;
		}
		while(!m_recordset->adoEOF)
		{
			_variant_t var = m_recordset->GetCollect("bh");
			CString bh = (char *)_bstr_t(var);
			sscanf(bh, "%d", &temp);
			if (max < temp)
			{
				max = temp;
			}
			m_recordset->MoveNext();
		}
	}
	catch (_com_error e)
	{
		AfxMessageBox(e.ErrorMessage());
	}
	
	if (flag == 1)
	{
		sql.Format("select distinct a.netword_IDN,a.s_n from Data%s%03d a, Independent_settings b WHERE a.netword_IDN=b.netword_IDN", strtime, max);
		_variant_t var;
		CString meter[20];
		CString serial[20];
		int n = 0;
		try
		{
			_RecordsetPtr m_recordset = m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
			if (!m_recordset->adoEOF)
			{
				m_recordset->MoveFirst();
			}
			else
			{
				if (app->language == 0)
				{
					AfxMessageBox("没有发现表!");
				}
				else
				{
					hHook=SetWindowsHookEx(WH_CBT,(HOOKPROC)CBTHookProc,AfxGetInstanceHandle(),NULL); 
					AfxMessageBox("Found no meter!");
				}
			}
			while (!m_recordset->adoEOF)
			{
				var = m_recordset->GetCollect("netword_IDN");
				meter[n] = (char *)_bstr_t(var);	
				m_list.InsertItem(n, (LPCTSTR)meter[n]);
				var = m_recordset->GetCollect("s_n");
				serial[n] = (char *)_bstr_t(var);
				m_list.SetItemText(n, 1, (LPCTSTR)serial[n]);
				m_recordset->MoveNext();
				n++;
			}
		}
		catch(_com_error e)
		{
			AfxMessageBox(e.ErrorMessage());
		}

		CCalibrationDlg *parent = (CCalibrationDlg *)GetParent();
		int x;
		for (i=0; i<n; i++)//n is the number of meter that is calibrated today
		{
			m_str += "\x57";

			int len = meter[i].GetLength();
			for (x=0; x<len; x++)
			{
				switch(meter[i].GetAt(x))
				{
				case '0':
					m_str += "\x30";
					break;
				case '1':
					m_str += "\x31";
					break;
				case '2':
					m_str += "\x32";
					break;
				case '3':
					m_str += "\x33";
					break;
				case '4':
					m_str += "\x34";
					break;
				case '5':
					m_str += "\x35";
					break;
				case '6':
					m_str += "\x36";
					break;
				case '7':
					m_str += "\x37";
					break;
				case '8':
					m_str += "\x38";
					break;
				case '9':
					m_str += "\x39";
					break;			
				}
			}
			char menu[6] = {'\x4d', '\x45', '\x4e', '\x55', '\x34', '\x35'};//YC Note: MENU45, set scale factor
			for (x=0; x<6; x++)
			{
				m_str += menu[x];
			}
			char buf[60];
			m_str += "\x26\x4c\x43\x44\x0d";//YC Note: &LCD\r

			int bj = 0;
			do
			{
				app->g_com.Write(m_str);
				app->g_com.Read(buf, 60);
				Sleep(100);
				if(strstr(buf, "标尺因子") || strstr(buf, "[45"))	//Never true!???
				{
					bj = 1;
				}
			}while(!bj);
			m_str = "";
			CString readstr;
			readstr.Format("%s", buf);
			readstr = readstr.Left(56);
			readstr = readstr.Right(19);
			readstr.TrimLeft();
			readstr.TrimRight();
			sscanf(readstr, "%f", &xishu[i]);//YC Note: xishu = current scale factor read from the testing meter
			CString temp;
			temp.Format("%.3f", xishu[i]);
			m_list.SetItemText(i, 2, (LPCTSTR)temp);
		}

		CString data[3][6]; //从数据库中采集的数据
		for (i=0; i<n; i++)
		{
			sql.Format("select * from Data%s%03d where netword_IDN=%s", strtime, max, meter[i]);
			
			int m = 0;
			try
			{
				_RecordsetPtr m_recordset = m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
				if (!m_recordset->adoEOF)
				{
					m_recordset->MoveFirst();
				}
				else
				{
					if (app->language == 0)
					{
						AfxMessageBox("没有发现表!");
					}
					else
					{
						hHook=SetWindowsHookEx(WH_CBT,(HOOKPROC)CBTHookProc,AfxGetInstanceHandle(),NULL); 
						AfxMessageBox("Found no meter!");
					}
				}
				while (!m_recordset->adoEOF)
				{
					var = m_recordset->GetCollect("flow_1");
					data[m][0] = (char *)_bstr_t(var);	
					var = m_recordset->GetCollect("flow_2");
					data[m][1] = (char *)_bstr_t(var);
					var = m_recordset->GetCollect("flow_3");
					data[m][2] = (char *)_bstr_t(var);
					var = m_recordset->GetCollect("Rflow_1");
					data[m][3] = (char *)_bstr_t(var);
					var = m_recordset->GetCollect("Rflow_2");
					data[m][4] = (char *)_bstr_t(var);
					var = m_recordset->GetCollect("Rflow_3");
					data[m][5] = (char *)_bstr_t(var);
					m_recordset->MoveNext();
					m++;
				}
			}
			catch(_com_error e)
			{
				AfxMessageBox(e.ErrorMessage());
			}
		
			int x, y;
			for (x=0; x<3; x++)
			{
				for (y=0; y<6; y++)
				{
					sscanf(data[x][y], "%f", &fdata[x][y]);
				}
			}	
			float s = 0.0;
			for (x=0; x<3; x++)
			{
				//YC amendment: s += ((fdata[x][3]/fdata[x][0]*xishu[i]+fdata[x][4]/fdata[x][1]*xishu[i]+fdata[x][5]/fdata[x][2]*xishu[i])/3);
				s += ((fdata[x][3] / fdata[x][0] + fdata[x][4] / fdata[x][1] + fdata[x][5] / fdata[x][2]) / 3);
			}
			xzxishu[i] = s/3;//YC Note: xzxishu is the amended scale factor
			xzxishu[i] = (int)(xzxishu[i]*1000+0.5f)/1000.0f;
			CString temp;
			temp.Format("%.3f", xzxishu[i]); 
			m_list.SetItemText(i, 3, (LPCTSTR)temp);
			for (x=0; x<3; x++)
			{
				for (y=0; y<3; y++)
				{
					wucha[x][y] = (fdata[x][y]-fdata[x][y+3])/fdata[x][y+3]*100;//YC Note: not applied in further computation excepted being stored in DB
					wucha[x][y] = (int)(wucha[x][y] * 100 + 0.5f) / 100.0f;
					xzwucha[x][y] = (fdata[x][y]*xzxishu[i]-fdata[x][y+3])/fdata[x][y+3]*100;//YC Note: the amended error after scaling
					if (xzwucha[x][y] > 1.0 || xzwucha[x][y] < -1.0)
					{
						check[i] = 0;
					}
				}
			}
			sql.Format("UPDATE Data%s%03d SET error_1=\'%.2f\',error_2=\'%.2f\',error_3=\'%.2f\' WHERE netword_IDN=%s AND flow=\'max\'", strtime, max, wucha[0][0], wucha[0][1], wucha[0][2], meter[i]);
			try
			{
				m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
			}
			catch (_com_error* e)
			{
				AfxMessageBox(e->ErrorMessage());
			}
			sql.Format("UPDATE Data%s%03d SET error_1=\'%.2f\',error_2=\'%.2f\',error_3=\'%.2f\' WHERE netword_IDN=%s AND flow=\'mid\'", strtime, max, wucha[1][0], wucha[1][1], wucha[1][2], meter[i]);
			try
			{
				m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
			}
			catch (_com_error* e)
			{
				AfxMessageBox(e->ErrorMessage());
			}
			sql.Format("UPDATE Data%s%03d SET error_1=\'%.2f\',error_2=\'%.2f\',error_3=\'%.2f\' WHERE netword_IDN=%s AND flow=\'min\'", strtime, max, wucha[2][0], wucha[2][1], wucha[2][2], meter[i]);
			try
			{
				m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
			}
			catch (_com_error* e)
			{
				AfxMessageBox(e->ErrorMessage());
			}
		}
	}
	return TRUE;  // return TRUE unless you set the focus to a control
	              // EXCEPTION: OCX Property Pages should return FALSE
}

void CAnalysisDlg::OnCheckout() 
{
	// TODO: Add your control notification handler code here
	int i;
	for (i=0; i<m_list.GetItemCount(); i++)
	{
		if (check[i] == 1)
		{
			m_list.SetItemText(i, 4, "YES");
		}
		else if (check[i] == 0)
		{
			m_list.SetItemText(i, 4, "NO");
		}
	}
}
void CAnalysisDlg::OnDblclkListAnalysis(NMHDR* pNMHDR, LRESULT* pResult) 
{
	// TODO: Add your control notification handler code here
	CCalibrationApp *app = (CCalibrationApp *)AfxGetApp(); //生成指向应用程序类的指针 
	POSITION pos = m_list.GetFirstSelectedItemPosition();
	if (pos == NULL)
	{
		if (app->language == 0)
		{
			TRACE0("没有选择行!\n");
		}
		else
		{
			TRACE0("no choice!\n");
		}
	}
	else
	{
		while (pos)
		{
			int nItem = m_list.GetNextSelectedItem(pos);
			if (app->language == 0)
			{
				TRACE1("第%d行被选中!\n", nItem);	
			}
			else
			{
				TRACE1("Line %d was chosen!\n", nItem);
			}	
			app->biaohao = m_list.GetItemText(nItem, 0);
			app->yxs = m_list.GetItemText(nItem, 2);
			app->xs = m_list.GetItemText(nItem, 3);
			errordlg.DestroyWindow();
			errordlg.Create(IDD_ERROR, NULL);
			errordlg.ShowWindow(SW_SHOW);
		}
    }
	*pResult = 0;
}

void CAnalysisDlg::OnClose()
{
	if (m_recordset)
		if (m_recordset->State == adStateOpen)
			m_recordset->Close();
	if (m_pAppConn)
		if (m_pAppConn->State == adStateOpen)
			m_pAppConn->Close();

	m_pAppConn.Release();

	CDialog::OnClose();
}





