// ErrorDlg.cpp : implementation file
//

#include "stdafx.h"
#include "Calibration.h"
#include "ErrorDlg.h"
#include "AnalysisDlg.h"
#include "CalibrationDlg.h"
#include "afxdisp.h"

#include <atlbase.h>  // 为了方便操作 VARIANT 类型变量，使用 CComVariant 模板类
#include "msword.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CErrorDlg dialog


CErrorDlg::CErrorDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CErrorDlg::IDD, pParent)
{
	//{{AFX_DATA_INIT(CErrorDlg)
	m_xishu = _T("");
	c_xishu = _T("");
	//}}AFX_DATA_INIT
}


void CErrorDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CErrorDlg)
	DDX_Control(pDX, IDC_ERROR, m_listerror);
	DDX_Text(pDX, IDC_XISHU, m_xishu);
	DDX_Text(pDX, IDC_XISHU2, c_xishu);
	//}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CErrorDlg, CDialog)
	//{{AFX_MSG_MAP(CErrorDlg)
	ON_WM_CLOSE()
	ON_BN_CLICKED(IDC_SETM45, OnSetm45)
	ON_BN_CLICKED(IDC_REPORT, OnReport)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CErrorDlg message handlers
LRESULT   __stdcall   CBTHookProc(long   nCode, WPARAM   wParam, LPARAM   lParam);
extern HHOOK   hHook;

int __stdcall SetChildFont(struct HWND__ *, long);
extern CFont *g_Font;

BOOL CErrorDlg::OnInitDialog()
{
	CDialog::OnInitDialog();
	CCalibrationApp *app = (CCalibrationApp*)AfxGetApp();

	LOGFONT lf;                        // Used to create the CFont.
	memset(&lf, 0, sizeof(LOGFONT));   // Clear out structure.
	lf.lfHeight = 15;                  // Request a 20-pixel-high font
	strcpy(lf.lfFaceName, "Times New Roman");
	if (g_Font.m_hObject)
		g_Font.DeleteObject();
	g_Font.CreateFontIndirect(&lf);    // Create the font.

	if (app->language == 0)
	{
		CString temp;
		temp.Format("error__%s", app->biaohao);
		this->SetWindowText(temp);
		GetDlgItem(IDC_STATIC_D)->SetWindowText("当前系数:");
		GetDlgItem(IDC_REPORT)->SetWindowText("导出报表");
		GetDlgItem(IDC_SETM45)->SetWindowText("设置仪表系数");
		m_listerror.InsertColumn(0, "流量", LVCFMT_LEFT, 45);
		m_listerror.InsertColumn(1, "第一次(100%)", LVCFMT_LEFT, 90);
		m_listerror.InsertColumn(2, "第二次(100%)", LVCFMT_LEFT, 90);
		m_listerror.InsertColumn(3, "第三次(100%)", LVCFMT_LEFT, 88);
		m_listerror.InsertItem(0, "大");
		m_listerror.InsertItem(1, "中");
		m_listerror.InsertItem(2, "小");
		::EnumChildWindows(m_hWnd, ::SetChildFont, (LPARAM)&g_Font);
	}
	else
	{
		CString temp;
		temp.Format("error_%s", app->biaohao);
		this->SetWindowText(temp);
		GetDlgItem(IDC_STATIC_D)->SetWindowText("Meter Scale Factor:");
		GetDlgItem(IDC_REPORT)->SetWindowText("Report");
		GetDlgItem(IDC_SETM45)->SetWindowText("Set scale factor");
		m_listerror.InsertColumn(0, "Flow", LVCFMT_LEFT, 45);
		m_listerror.InsertColumn(1, "first(100%)", LVCFMT_LEFT, 90);
		m_listerror.InsertColumn(2, "second time(100%)", LVCFMT_LEFT, 90);
		m_listerror.InsertColumn(3, "third time(100%)", LVCFMT_LEFT, 88);
		m_listerror.InsertItem(0, "Max");
		m_listerror.InsertItem(1, "Mid");
		m_listerror.InsertItem(2, "Min");
		::EnumChildWindows(m_hWnd, ::SetChildFont, (LPARAM)&g_Font);
	}
	//打开数据库
	//m_pAppConn.CreateInstance(__uuidof(Connection));
	//m_pAppConn->Open("File Name=MyData.udl", "", "", adConnectUnspecified);

	try
	{
		HRESULT hr = m_pAppConn.CreateInstance(__uuidof(Connection));
		if (FAILED(hr))
			AfxMessageBox("Can't create an intance of ADO.Connection");

		if (FAILED(m_pAppConn->Open(_bstr_t("File Name=MyData.udl"), _bstr_t(""), _bstr_t(""), adModeUnknown)))
			::AfxMessageBox(TEXT("Can't open datasource"));
		//m_pAppConn->Close();
	}
	catch (_com_error &e)
	{
		::AfxMessageBox(TEXT("I am in catch block 2"));
		_bstr_t bstrSource(e.Source());
		_bstr_t bstrDescription(e.Description());
		TRACE("Exception thrown for classes generated by #import");
		TRACE("\tCode = %08lx\n", e.Error());
		TRACE("\tCode meaning = %s\n", e.ErrorMessage());
		TRACE("\tSource = %s\n", (LPCTSTR)bstrSource);
		TRACE("\tDescription = %s\n", (LPCTSTR)bstrDescription);
	}
	catch (...)
	{
		TRACE("*** Unhandled Exception ***");
	}

	CString sql;
	sql.Format("USE settings");
	m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);

	SYSTEMTIME st;
	CString strtime;
	GetLocalTime(&st);
	strtime.Format("%04d%02d%02d", st.wYear, st.wMonth, st.wDay);

	int temp, max = 0;
	sql.Format("SELECT RIGHT(name,3) bh FROM sysobjects WHERE name LIKE \'Data%s%c\'", strtime, '%');
	try
	{
		m_recordset = m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
		if (!m_recordset->adoEOF)
		{
			m_recordset->MoveFirst();
		}
		while (!m_recordset->adoEOF)
		{
			_variant_t var = m_recordset->GetCollect("bh");
			CString bh = (char *)_bstr_t(var);
			sscanf(bh, "%d", &temp);
			if (max < temp)
			{
				max = temp;
			}
			m_recordset->MoveNext();
		}
	}
	catch (_com_error e)
	{
		AfxMessageBox(e.ErrorMessage());
	}
	sql.Format("select * from Data%s%03d where netword_IDN=%s", strtime, max, app->biaohao);
	try
	{
		m_recordset = m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
		if (!m_recordset->adoEOF)
		{
			m_recordset->MoveFirst();
		}
		else
		{
			if (app->language == 0)
			{
				AfxMessageBox("没有发现表!");
			}
			else
			{
				hHook = SetWindowsHookEx(WH_CBT, (HOOKPROC)CBTHookProc, AfxGetInstanceHandle(), NULL);
				AfxMessageBox("Found no meter!");
			}
		}
		int i = 0;
		while (!m_recordset->adoEOF)
		{
			_variant_t var = m_recordset->GetCollect("error_1");
			CString cstr = (char *)_bstr_t(var);
			m_listerror.SetItemText(i, 1, (LPCTSTR)cstr);
			var = m_recordset->GetCollect("error_2");
			cstr = (char *)_bstr_t(var);
			m_listerror.SetItemText(i, 2, (LPCTSTR)cstr);
			var = m_recordset->GetCollect("error_3");
			cstr = (char *)_bstr_t(var);
			m_listerror.SetItemText(i, 3, (LPCTSTR)cstr);
			m_recordset->MoveNext();
			i++;
		}
	}
	catch (_com_error e)
	{
		AfxMessageBox(e.ErrorMessage());
	}
	// TODO: Add extra initialization here
	CCalibrationDlg *parent = (CCalibrationDlg *)GetParent();
	int i;
	int len = app->biaohao.GetLength();
	str = "\x57";

	for (i = 0; i<len; i++)
	{
		switch (app->biaohao.GetAt(i))
		{
		case '0':
			str += "\x30";
			break;
		case '1':
			str += "\x31";
			break;
		case '2':
			str += "\x32";
			break;
		case '3':
			str += "\x33";
			break;
		case '4':
			str += "\x34";
			break;
		case '5':
			str += "\x35";
			break;
		case '6':
			str += "\x36";
			break;
		case '7':
			str += "\x37";
			break;
		case '8':
			str += "\x38";
			break;
		case '9':
			str += "\x39";
			break;
		}
	}
	//命令
	CString menu[6] = { "\4d", "\x45", "\x4e", "\x55", "\x34", "\x35"};//YC Note: MENU45
	for (i = 0; i<6; i++)
	{
		str += menu[i];
	}
	str += "\x26\x4c\x43\x44\x0d";

	app->g_com.Write(str);
	str = "";
	char buf[60];
	app->g_com.Read(buf, 60);
	Sleep(100);
	char *p = buf;
	CString readstr;
	char res[10] = { 0 };
	p += 10;
	int count = 0;
	while (*p != '\0')
	{
		if (*p == '[' && *(p + 1) == '4' && *(p + 2) == '5')
		{
			p += 3;
			break;
		}
		else if (IsDBCSLeadByte(*p))
		{
			break;
		}
		p++;
	}
	while (*p != '\0')
	{
		if (*p == '\n')
		{
			p += 1;
			break;
		}
		p++;
	}
	char *p2 = p;
	int q = 0;
	while (*p2 != '\0')
	{
		if (*p2 == '\n')
		{
			q++;
		}
		if (q == 1)
		{
			*p2 = '\0';
		}
		p2++;
	}
	while (*p != '\0')
	{
		if (*p <= '9' && *p >= '0' || *p == '.')
		{
			res[count++] = *p;
		}
		if (*p == '\n')
		{
			break;
		}
		p++;
	}
	res[count] = '\0';
	readstr.Format("%s", res);
	m_xishu = readstr;
	float xis;
	sscanf(app->xs, "%f", &xis);
	c_xishu.Format("%f", xis);
	UpdateData(FALSE);
	return TRUE;  // return TRUE unless you set the focus to a control
	// EXCEPTION: OCX Property Pages should return FALSE
}

void CErrorDlg::OnClose()
{
	if (m_recordset)
		if (m_recordset->State == adStateOpen)
			m_recordset->Close();
	if (m_pAppConn)
		if (m_pAppConn->State == adStateOpen)
			m_pAppConn->Close();

	m_pAppConn.Release();

	EndDialog(0);
	CDialog::OnClose();
}

void CErrorDlg::SetQS()
{
	//+		str	"W1DL\r"

	CCalibrationApp *app = (CCalibrationApp*)AfxGetApp();

	CString str = "";
	CString str1 = "W" + app->biaohao;
	CString str2 = "";
	str2 += "\x44\x4c\x0d";

	//发送消息
	str = str1 + str2;
	int fl = 1;
	char buf[60] = { 0 };
	int xnm = 0;
	do
	{
		app->g_com.Write(str);
		app->g_com.Read(buf, 60);
		Sleep(100);
		if (strstr(buf, "UP") != NULL && strstr(buf, "DN") != NULL)
		{
			fl = 0;
		}
		xnm++;
		if (xnm == 5)
		{
			break;
		}
	} while (fl);

	CString value_s;
	CString value_q;
	CString up;
	CString dn;
	char *p = strstr(buf, "UP");
	if ((p = strstr(buf, "UP")) != NULL)
	{
		up.Format("%c%c%c%c", *(p + 3), *(p + 4), *(p + 5), *(p + 6));
	}
	if ((p = strstr(buf, "DN")) != NULL)
	{
		dn.Format("%c%c%c%c", *(p + 3), *(p + 4), *(p + 5), *(p + 6));
	}
	if ((p = strstr(buf, "Q=")) != NULL)
	{
		value_q.Format("%c%c", *(p + 2), *(p + 3));
	}
	p = NULL;
	value_s.Format("UP:%s,DN:%s", up, dn);

	S = value_s;
	Q = value_q;

}

void CErrorDlg::SetR()
{
	CCalibrationApp *app = (CCalibrationApp *)AfxGetApp();
	CString str1 = "";
	CString str2 = "";
	CString str3 = "";


	str2 = "\x4d\x45\x4e\x55\x39\x31";
	str2 += "\x26\x4c\x43\x44\x0d";
	str1 = "W" + app->biaohao;

	str3 = str1 + str2;

	char buf[60] = { 0 };
	int bj = 0;
	int xnm = 0;
	do
	{
		app->g_com.Write(str3);
		app->g_com.Read(buf, 60);
		Sleep(100);
		if (strstr(buf, "时间比") != NULL || strstr(buf, "[91") != NULL)
		{
			bj = 1;
		}
		xnm++;
		if (xnm == 5)
		{
			break;
		}
	} while (!bj);
	str = "";
	//Sleep(100);

	char temp[20] = { 0 };
	char *p5 = NULL;
	if ((p5 = strstr(buf, "[91")) != NULL)
	{
		p5 += 6;
		strncpy(temp, p5, 16);
	}
	CString strtemp;
	strtemp.Format("%s", temp);
	strtemp.TrimLeft();

	R = strtemp;
}

void CErrorDlg::OnSetm45()
{
	// TODO: Add your control notification handler code here
	int res = AfxMessageBox("Are you sure that you want to Change Scale Factor in the Meter?", MB_YESNO);
	if (res == IDYES)
	{

		CCalibrationDlg *parent = (CCalibrationDlg *)GetParent();
		CCalibrationApp *app = (CCalibrationApp*)AfxGetApp();
		float xis;
		sscanf(app->xs, "%f", &xis);
		if (xis <= 1.5 && xis >= 0.5)
		{
			int i;
			int len = app->biaohao.GetLength();
			char menu[6] = { '\x4d', '\x45', '\x4e', '\x55', '\x34', '\x35' };

			SYSTEMTIME st;
			CString strtime;
			GetLocalTime(&st);
			strtime.Format("%04d%02d%02d", st.wYear, st.wMonth, st.wDay);

			float wucha[3][3];
			int x, y;
			float zxs;
			sscanf(app->xs, "%f", &zxs);
			float shuju[3][6];
			int temp, max = 0;
			CString sql;
			sql.Format("SELECT RIGHT(name,3) bh FROM sysobjects WHERE name LIKE \'Data%s%c\'", strtime, '%');
			try
			{
				m_recordset = m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
				if (!m_recordset->adoEOF)
				{
					m_recordset->MoveFirst();
				}
				while (!m_recordset->adoEOF)
				{
					_variant_t var = m_recordset->GetCollect("bh");
					CString bh = (char *)_bstr_t(var);
					sscanf(bh, "%d", &temp);
					if (max < temp)
					{
						max = temp;
					}
					m_recordset->MoveNext();
				}
			}
			catch (_com_error e)
			{
				AfxMessageBox(e.ErrorMessage());
			}
			sql.Format("select * from Data%s%03d where netword_IDN=%s", strtime, max, app->biaohao);
			CString data[3][6];
			int m = 0;
			try
			{
				m_recordset = m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
				if (!m_recordset->adoEOF)
				{
					m_recordset->MoveFirst();
				}
				else
				{
					if (app->language == 0)
					{
						AfxMessageBox("没有发现表!");
					}
					else
					{
						hHook = SetWindowsHookEx(WH_CBT, (HOOKPROC)CBTHookProc, AfxGetInstanceHandle(), NULL);
						AfxMessageBox("Found no meter!");
					}
				}
				while (!m_recordset->adoEOF)
				{
					_variant_t var = m_recordset->GetCollect("flow_1");
					data[m][0] = (char *)_bstr_t(var);
					var = m_recordset->GetCollect("flow_2");
					data[m][1] = (char *)_bstr_t(var);
					var = m_recordset->GetCollect("flow_3");
					data[m][2] = (char *)_bstr_t(var);
					var = m_recordset->GetCollect("Rflow_1");
					data[m][3] = (char *)_bstr_t(var);
					var = m_recordset->GetCollect("Rflow_2");
					data[m][4] = (char *)_bstr_t(var);
					var = m_recordset->GetCollect("Rflow_3");
					data[m][5] = (char *)_bstr_t(var);
					m++;
					m_recordset->MoveNext();
				}
			}
			catch (_com_error* e)
			{
				AfxMessageBox(e->ErrorMessage());
			}
			for (x = 0; x < 3; x++)
			{
				for (y = 0; y < 6; y++)
				{
					sscanf(data[x][y], "%f", &shuju[x][y]);
				}
			}
			float xsa;
			sscanf(app->xs, "%f", &xsa);
			for (x = 0; x < 3; x++)
			{
				for (y = 0; y < 3; y++)
				{
					wucha[x][y] = (shuju[x][y] * xsa - shuju[x][y + 3]) / shuju[x][y + 3] * 100;
					wucha[x][y] = (int)(wucha[x][y] * 100 + 0.5f) / 100.0f;
				}
			}
			sql.Format("UPDATE Data%s%03d SET error_1=\'%.2f\',error_2=\'%.2f\',error_3=\'%.2f\' WHERE netword_IDN=%s AND flow=\'min\'", strtime, max, wucha[0][0], wucha[0][1], wucha[0][2], app->biaohao);
			try
			{
				m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
			}
			catch (_com_error* e)
			{
				AfxMessageBox(e->ErrorMessage());
			}
			sql.Format("UPDATE Data%s%03d SET error_1=\'%.2f\',error_2=\'%.2f\',error_3=\'%.2f\' WHERE netword_IDN=%s AND flow=\'mid\'", strtime, max, wucha[1][0], wucha[1][1], wucha[1][2], app->biaohao);
			try
			{
				m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
			}
			catch (_com_error* e)
			{
				AfxMessageBox(e->ErrorMessage());
			}
			sql.Format("UPDATE Data%s%03d SET error_1=\'%.2f\',error_2=\'%.2f\',error_3=\'%.2f\' WHERE netword_IDN=%s AND flow=\'max\'", strtime, max, wucha[2][0], wucha[2][1], wucha[2][2], app->biaohao);
			try
			{
				m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
			}
			catch (_com_error* e)
			{
				AfxMessageBox(e->ErrorMessage());
			}

			sql.Format("select * from Data%s%03d where netword_IDN=%s", strtime, max, app->biaohao);
			try
			{
				m_recordset = m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
				if (!m_recordset->adoEOF)
				{
					m_recordset->MoveFirst();
				}
				else
				{
					if (app->language == 0)
					{
						AfxMessageBox("没有发现表!");
					}
					else
					{
						hHook = SetWindowsHookEx(WH_CBT, (HOOKPROC)CBTHookProc, AfxGetInstanceHandle(), NULL);
						AfxMessageBox("Found no meter!");
					}
				}
				int i = 0;
				while (!m_recordset->adoEOF)
				{
					_variant_t var = m_recordset->GetCollect("error_1");
					CString cstr = (char *)_bstr_t(var);
					m_listerror.SetItemText(i, 1, (LPCTSTR)cstr);
					var = m_recordset->GetCollect("error_2");
					cstr = (char *)_bstr_t(var);
					m_listerror.SetItemText(i, 2, (LPCTSTR)cstr);
					var = m_recordset->GetCollect("error_3");
					cstr = (char *)_bstr_t(var);
					m_listerror.SetItemText(i, 3, (LPCTSTR)cstr);
					m_recordset->MoveNext();
					i++;
				}
			}
			catch (_com_error e)
			{
				AfxMessageBox(e.ErrorMessage());
			}

			str = "\x57";

			for (i = 0; i < len; i++)
			{
				switch (app->biaohao.GetAt(i))
				{
				case '0':
					str += "\x30";
					break;
				case '1':
					str += "\x31";
					break;
				case '2':
					str += "\x32";
					break;
				case '3':
					str += "\x33";
					break;
				case '4':
					str += "\x34";
					break;
				case '5':
					str += "\x35";
					break;
				case '6':
					str += "\x36";
					break;
				case '7':
					str += "\x37";
					break;
				case '8':
					str += "\x38";
					break;
				case '9':
					str += "\x39";
					break;
				}
			}

			for (i = 0; i < 6; i++)
			{
				str += CString(menu[i]);
			}
			str += "\x26\x4d\x3d";//YC Note: &M=

			for (i = 0; i < app->xs.GetLength(); i++)
			{
				switch (app->xs.GetAt(i))
				{
				case '0':
					str += "\x26\x4d\x30";
					break;
				case '1':
					str += "\x26\x4d\x31";
					break;
				case '2':
					str += "\x26\x4d\x32";
					break;
				case '3':
					str += "\x26\x4d\x33";
					break;
				case '4':
					str += "\x26\x4d\x34";
					break;
				case '5':
					str += "\x26\x4d\x35";
					break;
				case '6':
					str += "\x26\x4d\x36";
					break;
				case '7':
					str += "\x26\x4d\x37";
					break;
				case '8':
					str += "\x26\x4d\x38";
					break;
				case '9':
					str += "\x26\x4d\x39";
					break;
				case '.':
					str += "\x26\x4d\x3a";
					break;

				default:
					if (app->language == 0)
					{
						AfxMessageBox("您的输入有误!");
					}
					else
					{
						hHook = SetWindowsHookEx(WH_CBT, (HOOKPROC)CBTHookProc, AfxGetInstanceHandle(), NULL);
						AfxMessageBox("Your input is incorrect!");
					}
				}
			}
			str += "\x26\x4d\x3d\x0d";

			app->g_com.Write(str);
			Sleep(100);
			m_xishu = app->xs;
			UpdateData(FALSE);
			GetDlgItem(IDC_SETM45)->EnableWindow(FALSE);

			CString str1, str2;
			sql.Format("SELECT netword_IDN,table_type FROM Independent_settings where table_type = 0");
			try
			{
				m_recordset = m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
				while (!m_recordset->adoEOF)
				{
					_variant_t var = m_recordset->GetCollect("netword_IDN");
					CString cstr = (char *)_bstr_t(var);
					str1 = "\x57";

					int len = cstr.GetLength();
					for (i = 0; i < len; i++)
					{
						switch (cstr.GetAt(i))
						{
						case '0':
							str1 += "\x30";
							break;
						case '1':
							str1 += "\x31";
							break;
						case '2':
							str1 += "\x32";
							break;
						case '3':
							str1 += "\x33)";
							break;
						case '4':
							str1 += "\x34)";
							break;
						case '5':
							str1 += "\x35";
							break;
						case '6':
							str1 += "\x36";
							break;
						case '7':
							str1 += "\x37)";
							break;
						case '8':
							str1 += "\x38";
							break;
						case '9':
							str1 += "\x39";
							break;
						}
					}
					CString str2;
					char menu[7] = { '\x4d', '\x45', '\x4e', '\x55', '\x32', '\x36', '\x0d' };
					for (i = 0; i < 7; i++)
					{
						str2 += menu[i];
					}
					str = str1 + str2;
					app->g_com.Write(str);
					str2 = "";
					str = "";
					//Sleep(100);

					str2 = "\x4d\x3d\x0d";

					str = str1 + str2;
					app->g_com.Write(str);
					str2 = "";
					str = "";
					//Sleep(100);

					str2 = "\x4d\x31\x0d";

					str = str1 + str2;
					app->g_com.Write(str);
					str2 = "";
					str = "";
					//Sleep(100);

					str2 = "\x4d\x3d\x0d";

					app->g_com.Write(str);
					str2 = "";
					str = "";

					Sleep(100);
					str1 = "";
					m_recordset->MoveNext();
				}

			}
			catch (_com_error e)
			{
				AfxMessageBox(e.ErrorMessage());
			}
		}
		else
		{
			if (app->language == 0)
			{
				AfxMessageBox("设置失败,系数不能大于1.5或者小于0.5");
			}
			else
			{
				hHook = SetWindowsHookEx(WH_CBT, (HOOKPROC)CBTHookProc, AfxGetInstanceHandle(), NULL);
				AfxMessageBox("Setting failure,scale factor can not greater than 1.5 or less than 0.5");
			}
		}
	}//user select yes
}

void CErrorDlg::OnReport()
{
	// TODO: Add your control notification handler code here
	//连接数据库
	CCalibrationApp *app = (CCalibrationApp*)AfxGetApp();

	SYSTEMTIME st;
	CString strtime, strtime1;
	GetLocalTime(&st);
	strtime.Format("%04d%02d%02d", st.wYear, st.wMonth, st.wDay);
	strtime1.Format("%02d%02d%04d%02d%02d", st.wMonth, st.wDay, st.wYear, st.wHour, st.wMinute);

	int temp, max = 0;
	CString sql;
	sql.Format("SELECT RIGHT(name,3) bh FROM sysobjects WHERE name LIKE \'Data%s%c\'", strtime, '%');
	try
	{
		m_recordset = m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
		if (!m_recordset->adoEOF)
		{
			m_recordset->MoveFirst();
		}
		while (!m_recordset->adoEOF)
		{
			_variant_t var = m_recordset->GetCollect("bh");
			CString bh = (char *)_bstr_t(var);
			sscanf(bh, "%d", &temp);
			if (max < temp)
			{
				max = temp;
			}
			m_recordset->MoveNext();
		}
	}
	catch (_com_error e)
	{
		AfxMessageBox(e.ErrorMessage());
	}

	CString stemp;
	sql.Format("select transducer_type from Independent_settings where netword_IDN=%s", app->biaohao);
	try
	{
		m_recordset = m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
		if (!m_recordset->adoEOF)
		{
			m_recordset->MoveFirst();
		}
		_variant_t var = m_recordset->GetCollect("transducer_type");
		stemp = (char *)_bstr_t(var);
	}
	catch (_com_error e)
	{
		AfxMessageBox(e.ErrorMessage());
	}

	CString data[10][12];
	int n = 0;
	sql.Format("select * from Data%s%03d where netword_IDN=%s", strtime, max, app->biaohao);
	try
	{
		m_recordset = m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
		if (!m_recordset->adoEOF)
		{
			m_recordset->MoveFirst();
		}
		else
		{
			if (app->language == 0)
			{
				AfxMessageBox("没有发现表!");
			}
			else
			{
				hHook = SetWindowsHookEx(WH_CBT, (HOOKPROC)CBTHookProc, AfxGetInstanceHandle(), NULL);
				AfxMessageBox("Found no meter!");
			}
		}
		while (!m_recordset->adoEOF)
		{
			_variant_t var = m_recordset->GetCollect("netword_IDN");
			data[n][0] = (char *)_bstr_t(var);
			var = m_recordset->GetCollect("s_n");
			data[n][1] = (char *)_bstr_t(var);
			var = m_recordset->GetCollect("flow");
			data[n][2] = (char *)_bstr_t(var);
			var = m_recordset->GetCollect("Rflow_1");
			data[n][3] = (char *)_bstr_t(var);
			var = m_recordset->GetCollect("Rflow_2");
			data[n][4] = (char *)_bstr_t(var);
			var = m_recordset->GetCollect("Rflow_3");
			data[n][5] = (char *)_bstr_t(var);
			var = m_recordset->GetCollect("flow_1");
			data[n][6] = (char *)_bstr_t(var);
			var = m_recordset->GetCollect("flow_2");
			data[n][7] = (char *)_bstr_t(var);
			var = m_recordset->GetCollect("flow_3");
			data[n][8] = (char *)_bstr_t(var);
			var = m_recordset->GetCollect("error_1");
			data[n][9] = (char *)_bstr_t(var);
			var = m_recordset->GetCollect("error_2");
			data[n][10] = (char *)_bstr_t(var);
			var = m_recordset->GetCollect("error_3");
			data[n][11] = (char *)_bstr_t(var);
			n++;
			m_recordset->MoveNext();
		}
	}
	catch (_com_error e)
	{
		AfxMessageBox(e.ErrorMessage());
	}

	CString TransducerType;
	if (stemp.Compare("0") == 0)
	{
		TransducerType = "M";
	}
	else if (stemp.Compare("1") == 0)
	{
		TransducerType = "C";
	}
	else if (stemp.Compare("2") == 0)
	{
		TransducerType = "S";
	}
	else if (stemp.Compare("3") == 0)
	{
		TransducerType = "User Type";
	}
	else if (stemp.Compare("4") == 0)
	{
		TransducerType = "B";
	}
	else if (stemp.Compare("5") == 0)
	{
		TransducerType = "B(45)";
	}
	else if (stemp.Compare("6") == 0)
	{
		TransducerType = "L";
	}
	else if (stemp.Compare("7") == 0)
	{
		TransducerType = "JH-Ploysonics";
	}
	else if (stemp.Compare("8") == 0)
	{
		TransducerType = "HS";
	}
	else if (stemp.Compare("9") == 0)
	{
		TransducerType = "HM";
	}
	else if (stemp.Compare("10") == 0)
	{
		TransducerType = "M1";
	}
	else if (stemp.Compare("11") == 0)
	{
		TransducerType = "S1";
	}
	else if (stemp.Compare("12") == 0)
	{
		TransducerType = "L1";
	}
	else if (stemp.Compare("13") == 0)
	{
		TransducerType = "PI-Type";
	}
	else if (stemp.Compare("14") == 0)
	{
		TransducerType = "FS410";
	}
	else if (stemp.Compare("15") == 0)
	{
		TransducerType = "FS510";
	}
	else if (stemp.Compare("16") == 0)
	{
		TransducerType = "TM-1";
	}
	else if (stemp.Compare("17") == 0)
	{
		TransducerType = "TC-1";
	}
	else if (stemp.Compare("18") == 0)
	{
		TransducerType = "TS-1";
	}
	else if (stemp.Compare("19") == 0)
	{
		TransducerType = "TS-2";
	}
	else if (stemp.Compare("20") == 0)
	{
		TransducerType = "TL-1";
	}
	else if (stemp.Compare("21") == 0)
	{
		TransducerType = "TL-2";
	}

	CString data1[3];
	sql.Format("select pipe_outer_diameter, fluid_type, pipe_material from Common_settings", app->biaohao);
	try
	{
		m_recordset = m_pAppConn->Execute((_bstr_t)sql, NULL, adCmdText);
		_variant_t var = m_recordset->GetCollect("pipe_outer_diameter");
		data1[0] = (char *)_bstr_t(var);
		var = m_recordset->GetCollect("fluid_type");
		data1[1] = (char *)_bstr_t(var);
		var = m_recordset->GetCollect("pipe_material");
		data1[2] = (char *)_bstr_t(var);

	}
	catch (_com_error e)
	{
		AfxMessageBox(e.ErrorMessage());
	}

	if (data1[1].Compare("0") == 0)
		data1[1] = "Water(General)";
	else if (data1[1].Compare("1") == 0)
		data1[1] = "Sea Water";
	else if (data1[1].Compare("2") == 0)
		data1[1] = "Kerosene";
	else if (data1[1].Compare("3") == 0)
		data1[1] = "Gasoline";
	else if (data1[1].Compare("4") == 0)
		data1[1] = "Fuel Oil";
	else if (data1[1].Compare("5") == 0)
		data1[1] = "Crude Oil";
	else if (data1[1].Compare("6") == 0)
		data1[1] = "Propane(-45C)";
	else if (data1[1].Compare("7") == 0)
		data1[1] = "Butane(0C)";
	else if (data1[1].Compare("8") == 0)
		data1[1] = "Other Liquid";
	else if (data1[1].Compare("9") == 0)
		data1[1] = "Diesel Oil";
	else if (data1[1].Compare("10") == 0)
		data1[1] = "Castor Oil";
	else if (data1[1].Compare("11") == 0)
		data1[1] = "Peanut Oil";
	else if (data1[1].Compare("12") == 0)
		data1[1] = "Gasoline #90";
	else if (data1[1].Compare("13") == 0)
		data1[1] = "Gasoline #93";
	else if (data1[1].Compare("14") == 0)
		data1[1] = "Alcohol";
	else if (data1[1].Compare("15") == 0)
		data1[1] = "Water(125C)";

	if ((data1[0].Compare("2.375") == 0) || (data1[0].Compare("2.125") == 0))
		data1[0] = "2 Inch";
	else if ((data1[0].Compare("1.625") == 0) || (data1[0].Compare("1.9") == 0))
		data1[0] = "1.5 Inch";
	else if ((data1[0].Compare("1.315") == 0) || (data1[0].Compare("1.125") == 0))
		data1[0] = "1 Inch";
	else if ((data1[0].Compare("0.0875") == 0) || (data1[0].Compare("1.050") == 0))
		data1[0] = "3/4 Inch";
	if ((data1[0].Compare("0.840") == 0) || (data1[0].Compare("0.625") == 0))
		data1[0] = "1/2 Inch";

	if (data1[2].Compare("0") == 0)
		data1[2] = "Carbon Stee1";
	else if (data1[2].Compare("1") == 0)
		data1[2] = "Stainless Stee1";
	else if (data1[2].Compare("2") == 0)
		data1[2] = "Cast Iron";
	else if (data1[2].Compare("3") == 0)
		data1[2] = "Ductile Iron";
	else if (data1[2].Compare("4") == 0)
		data1[2] = "Copper";
	else if (data1[2].Compare("5") == 0)
		data1[2] = "PVC";
	else if (data1[2].Compare("6") == 0)
		data1[2] = "Aluminium";
	else if (data1[2].Compare("7") == 0)
		data1[2] = "Asbestos";
	else if (data1[2].Compare("8") == 0)
		data1[2] = "FiberGlass-Epoxy";
	else if (data1[2].Compare("9") == 0)
		data1[2] = "Other";

	float shuju[3][6] = { 0 };
	int x, y;
	for (x = 0; x<3; x++)
	{
		for (y = 0; y<6; y++)
		{
			sscanf(data[x][y + 3], "%f", &shuju[x][y]);
			shuju[x][y] = (int)(shuju[x][y] * 1000 + 0.5f) / 1000.0f;
		}
	}

	for (x = 0; x<3; x++)
	{
		for (y = 0; y<6; y++)
		{
			data[x][y + 3].Format("%g", shuju[x][y]);
		}
	}
	char  exepath[MAX_PATH];
	CString  strdir, tmpdir;
	memset(exepath, 0, MAX_PATH);
	GetModuleFileName(NULL, exepath, MAX_PATH);
	tmpdir = exepath;
	strdir = tmpdir.Left(tmpdir.ReverseFind('\\'));
	CString path;
	path.Format("%s\\STUF_Factory_Flowmeter_calibration.doc", strdir);

	//写入word文档
	try
	{
		CWaitCursor wait;
		_Application wordApp;
		_Document wordDoc;
		Documents wordDocs;
		if (!wordApp.CreateDispatch("word.Application"))//启动WORD
		{
			AfxMessageBox("Application创建失败，请确保安装了word 2003或以上版本!");
			return;
		}
		//wordApp.SetVisible(TRUE); //设置WORD可见。
		LPDISPATCH pDocs = wordApp.GetDocuments();
		wordDocs.AttachDispatch(pDocs);
		if (!wordDocs.m_lpDispatch)
		{
			AfxMessageBox("Documents创建失败!", MB_OK | MB_ICONWARNING);
		}
		VARIANT varOptional;
		VariantInit(&varOptional);
		varOptional.vt = VT_ERROR;
		varOptional.scode = DISP_E_PARAMNOTFOUND;

		COleVariant vTrue((short)TRUE),
			vFalse((short)FALSE),
			vOptional((long)DISP_E_PARAMNOTFOUND, VT_ERROR),
			vZ((short)0);
		COleVariant vFileName(_T(path));

		wordDoc.AttachDispatch(wordDocs.Open(vFileName, vTrue, vFalse, vFalse, vOptional, vOptional, vOptional, vOptional, vOptional,
			vOptional, vOptional, vOptional, vOptional, vZ, vOptional, vOptional));        // Close AttachDispatch
		if (!wordDoc.m_lpDispatch)
		{
			AfxMessageBox("Document打开失败!", MB_OK | MB_ICONWARNING);
			return;
		}

		Range wordRange, wordRange2;
		wordRange = wordDoc.Range(&varOptional, &varOptional);

		Selection wordSelec = wordApp.GetSelection();
		_Font oFont;
		_ParagraphFormat wordFormat;

		Cell tblCell, tblCell2;
		CString strValue;
		int i, j;

		wordSelec.MoveDown(COleVariant((short)5), COleVariant((short)4), COleVariant((short)0));

		wordSelec.TypeParagraph();
		oFont = wordSelec.GetFont();
		oFont.SetBold(9999998);
		oFont.SetItalic(9999998);
		oFont.SetSize(14);
		wordFormat = wordSelec.GetParagraphFormat();
		wordFormat.SetAlignment(2);
		CString strTop;

		wordSelec.TypeText(LPCSTR(strTop));
		oFont.SetBold(9999998);
		oFont.SetItalic(9999998);
		wordSelec.TypeParagraph();
		wordFormat.SetAlignment(3);

		//Table for general info about Calibration
		long numRows, numCol;
		numRows = 6;
		numCol = 4;
		Tables wordTables1 = wordSelec.GetTables();
		wordFormat = wordSelec.GetParagraphFormat();
		wordFormat.SetAlignment(0);
		Table wordTable1 = wordTables1.Add(wordSelec.GetRange(), numRows, numCol, COleVariant((short)1), COleVariant((short)0));

		CString strField11[6] = { "Certificate Number:", "Procedure:", "Pipe Material:", "Transit-Time ratio:", "Signal Quality:", "Method:" };
		CString strField22[6] = { "Model:", "Serial Number:", "Pipe Size:", "Fluid:", "Signal Strength", "Transducer" };
		CString strField3[3] = { "TP10", "Flow Calibration", "Calibration by Comparison"};

		tblCell = wordTable1.Cell(1, 1);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField22[0];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable1.Cell(2,1);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField22[1];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable1.Cell(3,1);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField22[2];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable1.Cell(4,1);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField22[3];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable1.Cell(5, 1);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField22[4];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable1.Cell(6, 1);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField22[5];
		wordRange.InsertAfter(strValue);

		//column 3
		tblCell = wordTable1.Cell(1, 3);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField11[0];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable1.Cell(2, 3);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField11[1];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable1.Cell(3, 3);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField11[2];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable1.Cell(4, 3);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField11[3];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable1.Cell(5, 3);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField11[4];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable1.Cell(6, 3);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField11[5];
		wordRange.InsertAfter(strValue);

		//insert common values
		tblCell = wordTable1.Cell(6, 4);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField3[2];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable1.Cell(1, 2);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField3[0];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable1.Cell(2, 4);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField3[1];
		wordRange.InsertAfter(strValue);
		
		//SN
		tblCell = wordTable1.Cell(2, 2);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = data[0][1];
		wordRange.InsertAfter(strValue);

		//Trancducer Type
		tblCell = wordTable1.Cell(6, 2);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		wordRange.InsertAfter(TransducerType);

		//Common Settings: Pipe size, Fluid type, pipe material
		tblCell = wordTable1.Cell(3, 2);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = data1[0];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable1.Cell(4, 2);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = data1[1];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable1.Cell(3, 4);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = data1[2];
		wordRange.InsertAfter(strValue);

		//Insert sertificate number : Date + Time
		tblCell = wordTable1.Cell(1, 4);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		wordRange.InsertAfter(strtime1);

		//set Value of the S and Q
		SetQS();

		//Insert S and Q
		tblCell = wordTable1.Cell(5, 2);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		wordRange.InsertAfter(S);

		tblCell = wordTable1.Cell(5, 4);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		wordRange.InsertAfter(Q);

		//set value fo the R
		SetR();

		tblCell = wordTable1.Cell(4, 4);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		wordRange.InsertAfter(R);

		wordSelec.MoveDown(COleVariant((short)5), COleVariant((short)7), COleVariant((short)0));

		wordSelec.TypeParagraph();
		oFont = wordSelec.GetFont();
		oFont.SetBold(9999998);
		oFont.SetItalic(9999998);
		oFont.SetSize(14);
		wordFormat = wordSelec.GetParagraphFormat();
		wordFormat.SetAlignment(2);
		CString strTop1;
		strTop1.Format("Calibrated Scale Factor: %s", app->xs);
		wordSelec.TypeText(LPCSTR(strTop1));
		oFont.SetBold(9999998);
		oFont.SetItalic(9999998);
		wordSelec.TypeParagraph();

		//设置表格2
		long nRows, nCols;
		nRows = 6;
		nCols = 10;
		Tables wordTables = wordSelec.GetTables();
		wordFormat = wordSelec.GetParagraphFormat();
		wordFormat.SetAlignment(1);
		Table wordTable = wordTables.Add(wordSelec.GetRange(), nRows, nCols, COleVariant((short)1), COleVariant((short)0));

		char buf[50] = { 0 };

		CString strField[4] = { "Flow\nRate", "Reference Reading(GPM)", "Meter Reading(GPM)", "Error(%)" };
		CString strField2[4] = { "Low", "Medium", "High", "Summary" };

		tblCell = wordTable.Cell(1, 1);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField[0];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(1, 2);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField[1];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(1, 5);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField[2];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(1, 8);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField[3];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(3, 1);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField2[0];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(4, 1);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField2[1];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(5, 1);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField2[2];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(6, 1);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = strField2[3];
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(2, 2);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = "1";
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(2, 3);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = "2";
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(2, 4);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = "3";
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(2, 5);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = "1";
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(2, 6);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = "2";
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(2, 7);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = "3";
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(2, 8);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = "K1";
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(2, 9);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = "K2";
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(2, 10);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = "K3";
		wordRange.InsertAfter(strValue);

		tblCell = wordTable.Cell(6, 2);
		wordRange = tblCell.GetRange();
		oFont = wordRange.GetFont();
		oFont.SetName("Times New Roman");
		strValue = "PASS";
		wordRange.InsertAfter(strValue);

		for (i = 3; i <= nRows; i++)
		{
			for (j = 2; j <= nCols; j++)
			{
				tblCell = wordTable.Cell(i, j);
				wordRange = tblCell.GetRange();
				oFont = wordRange.GetFont();
				oFont.SetName("Times New Roman");
				strValue = data[i - 3][j + 1];
				wordRange.InsertAfter(strValue);
			}
		}

		Cell cell = wordTable.Cell(1, 1);
		cell.Merge(wordTable.Cell(2, 1));

		cell = wordTable.Cell(1, 2);
		cell.Merge(wordTable.Cell(1, 3));
		cell.Merge(wordTable.Cell(1, 3));

		cell = wordTable.Cell(1, 3);
		cell.Merge(wordTable.Cell(1, 4));
		cell.Merge(wordTable.Cell(1, 4));

		cell = wordTable.Cell(1, 4);
		cell.Merge(wordTable.Cell(1, 5));
		cell.Merge(wordTable.Cell(1, 5));

		cell = wordTable.Cell(6, 2);
		for (i = 0; i<8; i++)
		{
			cell.Merge(wordTable.Cell(6, 3));
		}

		SYSTEMTIME st;
		CString strtime;
		GetLocalTime(&st);
		strtime.Format("%04d_%02d_%02d", st.wYear, st.wMonth, st.wDay);

		//create folder at the Documents
		//save file to the folder

		path.Format("%s\\data\\STUF_Factory_Flowmeter_calibration_%s_%s.doc", strdir, data[0][1], TransducerType);
		COleVariant vFileName2(_T(path));
		wordDoc.SaveAs(vFileName2,     // FileName   
			vZ,            // FileFormat.
			vFalse,        // LockComments.
			vOptional,     // Password.
			vTrue,         // AddToRecentFiles.
			vOptional,     // WritePassword.
			vFalse,        // ReadOnlyRecommended.
			vFalse,        // EmbedTrueTypeFonts.
			vFalse,        // SaveNativePictureFormat.
			vFalse,        // SaveFormsData
			vFalse,        // SaveAsAOCELetter
			vOptional,     // 
			vOptional,     //
			vOptional,     //
			vOptional,     // 
			vOptional);
		wordApp.SetVisible(true);
		wordDoc.Activate();

		wordSelec.ReleaseDispatch();   
		wordDocs.ReleaseDispatch();  
		wordDoc.ReleaseDispatch();
		VARIANT SaveChanges, OriginalFormat, RouteDocument; 
		SaveChanges.vt = VT_BOOL;  
		SaveChanges.boolVal = VARIANT_FALSE;
		::VariantInit(&OriginalFormat);
		RouteDocument.vt = VT_EMPTY;    
		wordApp.Quit(&SaveChanges, &OriginalFormat, &RouteDocument);
		wordApp.ReleaseDispatch();  
	}
	catch (_com_error   *e)
	{
		AfxMessageBox(e->ErrorMessage());
	}

	CoUninitialize();
}
